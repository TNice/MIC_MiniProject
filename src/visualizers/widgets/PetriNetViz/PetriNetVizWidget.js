/*globals define, WebGMEGlobal*/

/**
 * Generated by VisualizerGenerator 1.7.0 from webgme on Mon Dec 05 2022 19:06:47 GMT+0000 (Coordinated Universal Time).
 */

define(['jointjs', 'css!./styles/PetriNetVizWidget.css'], function (joint) {
    'use strict';

    var WIDGET_CLASS = 'petri-net-viz';

    function PetriNetVizWidget(logger, container) {
        this._logger = logger.fork('Widget');

        this._el = container;

        this.nodes = {};
        this._initialize();

        this._logger.debug('ctor finished');
    }

    PetriNetVizWidget.prototype._initialize = function () {
        console.log(joint);
        var width = this._el.width(),
            height = this._el.height(),
            self = this;

        // set widget class
        this._el.addClass(WIDGET_CLASS);

        // Create a dummy header
       // this._el.append('<h3>PetriNetViz Events:</h3>');
        this._jointPN = new joint.dia.Graph;
        this._jointPaper = new joint.dia.Paper({
            el: this._el,
            width: width,
            height: height,
            model: this._jointPN,
            interactive: false
        });

        this._webgmePN = null;

        // Registering to events can be done with jQuery (as normal)
        // this._el.on('dblclick', function (event) {
        //     event.stopPropagation();
        //     event.preventDefault();
        //     self.onBackgroundDblClick();
        // });
    };

    PetriNetVizWidget.prototype.onWidgetContainerResize = function (width, height) {
        this._logger.debug('Widget is resizing...');
    };

    // Adding/Removing/Updating items
    // PetriNetVizWidget.prototype.addNode = function (desc) {
    //     if (desc) {
    //         // Add node to a table of nodes
    //         var node = document.createElement('div'),
    //             label = 'children';

    //         if (desc.childrenIds.length === 1) {
    //             label = 'child';
    //         }

    //         this.nodes[desc.id] = desc;
    //         node.innerHTML = 'Adding node "' + desc.name + '" (click to view). It has ' +
    //             desc.childrenIds.length + ' ' + label + '.';

    //         this._el.append(node);
    //         node.onclick = this.onNodeClick.bind(this, desc.id);
    //     }
    // };

    PetriNetVizWidget.prototype.initNetwork = function (networkDescriptor){
        const self = this;
        console.log(networkDescriptor);

        self._webgmePN = networkDescriptor;
        self._jointPN.clear();
        const pn = self._webgmePN;

        Object.keys(pn.places).forEach(pId => {
            let vertex = new joint.shapes.standard.Circle({
                position: pn.places[pId].position,
                size: { width: 60, height: 60 },
                attrs: {
                    label : {
                        text: pn.places[pId].name + ' - ' + pn.places[pId].marking,
                        fontWeight: 'bold',
                    },
                    body: {
                        strokeWidth: 3
                    }
                }
            })
            vertex.addTo(self._jointPN);
            pn.places[pId].joint = vertex;
        });

        Object.keys(pn.transitions).forEach(tId => {
            let vertex = new joint.shapes.standard.Rectangle({
                position: pn.transitions[tId].position,
                size: { width: 60, height: 60 },
                attrs: {
                    label : {
                        text: pn.transitions[tId].name,
                        fontWeight: 'bold',
                    },
                    body: {
                        strokeWidth: 3,
                    }
                }
            })
            vertex.addTo(self._jointPN);
            pn.transitions[tId].joint = vertex;
        });

        Object.keys(pn.places).forEach(pId => {
            const place = pn.places[pId];
            Object.keys(place.next).forEach(nextId => {
                place.jointNext = place.jointNext || {};
                const link = new joint.shapes.standard.Link({
                    source: {id: place.joint.id},
                    target: {id: pn.transitions[place.next[nextId]].joint.id},
                    attrs:{
                        line:{
                            strokeWidth: 2
                        }
                    }
                });
                link.addTo(self._jointPN);
                place.jointNext[nextId] = link;
            });
        });

        Object.keys(pn.transitions).forEach(tId => {
            const transition = pn.transitions[tId];
            Object.keys(transition.next).forEach(nextId => {
                transition.jointNext = transition.jointNext || {};
                const link = new joint.shapes.standard.Link({
                    source: {id: transition.joint.id},
                    target: {id: pn.places[transition.next[nextId]].joint.id},
                    attrs:{
                        line:{
                            strokeWidth: 2
                        }
                    }
                });
                link.addTo(self._jointPN);
                transition.jointNext[nextId] = link;
            });
        });
        console.log(self._jointPN)
        self._jointPaper.updateViews();
        self._decorateNetwork();
    };

    PetriNetVizWidget.prototype.resetNetwork = function (){
        this._decorateNetwork();
    };


    PetriNetVizWidget.prototype.AddMark = function () {
        const pn = this._webgmePN;
        Object.keys(pn.places).forEach(pId => {
            pn.places[pId].marking += 1;
        });
        this._decorateNetwork();
    };

    PetriNetVizWidget.prototype.SubMark = function () {
        const pn = this._webgmePN;
        Object.keys(pn.places).forEach(pId => {
            pn.places[pId].marking -= 1;
        });
        this._decorateNetwork();
    };

    PetriNetVizWidget.prototype._decorateNetwork = function () {
        const pn = this._webgmePN;
        Object.keys(pn.places).forEach(pId => {
            pn.places[pId].joint.attr('label/text', pn.places[pId].name + ' - ' + pn.places[pId].marking);
        });
        Object.keys(pn.transitions).forEach(tId => {
            let active = true;
            pn.transitions[tId].prev.forEach(prevPlace => {
                if (prevPlace.marking == 0){
                    active = false; 
                }
            });

            if(active){
                pn.transitions[tId].joint.attr('body/fill', '#00FF00')
                pn.transitions[tId].joint.attr('body/cursor', 'pointer')
                pn.transitions[tId].joint.attr('label/cursor', 'pointer')
                pn.transitions[tId].joint.attr('body/event', 'element:label:pointerdown')
            }else{
                pn.transitions[tId].joint.attr('body/fill', '#FF0000')
                pn.transitions[tId].joint.attr('body/event', '')
                pn.transitions[tId].joint.attr('body/cursor', '')
                pn.transitions[tId].joint.attr('label/cursor', '')
            }
        });
    };

    // PetriNetVizWidget.prototype.removeNode = function (gmeId) {
    //     var desc = this.nodes[gmeId];
    //     this._el.append('<div>Removing node "' + desc.name + '"</div>');
    //     delete this.nodes[gmeId];
    // };

    // PetriNetVizWidget.prototype.updateNode = function (desc) {
    //     if (desc) {
    //         this._logger.debug('Updating node:', desc);
    //         this._el.append('<div>Updating node "' + desc.name + '"</div>');
    //     }
    // };

    /* * * * * * * * Visualizer event handlers * * * * * * * */

    // PetriNetVizWidget.prototype.onNodeClick = function (/*id*/) {
    //     // This currently changes the active node to the given id and
    //     // this is overridden in the controller.
    // };

    // PetriNetVizWidget.prototype.onBackgroundDblClick = function () {
    //     this._el.append('<div>Background was double-clicked!!</div>');
    // };

    /* * * * * * * * Visualizer life cycle callbacks * * * * * * * */
    PetriNetVizWidget.prototype.destroy = function () {
    };

    PetriNetVizWidget.prototype.onActivate = function () {
        this._logger.debug('PetriNetVizWidget has been activated');
    };

    PetriNetVizWidget.prototype.onDeactivate = function () {
        this._logger.debug('PetriNetVizWidget has been deactivated');
    };

    return PetriNetVizWidget;
});
